{"version":3,"sources":["components/app/styles.js","components/header/styles.js","components/header/index.js","components/exchange/styles.js","queries/rates/index.js","contexts/pockets/index.js","contexts/exchange/index.js","components/rate-card/select-currency/index.js","components/rate-card/input-value/styles.js","components/rate-card/input-value/index.js","components/rate-card/input-value/utils.js","components/rate-card/styles.js","components/rate-card/index.js","components/rate-value/index.js","components/switch-currency/styles.js","components/switch-currency/index.js","components/exchange/submit-exchange/styles.js","components/exchange/submit-exchange/index.js","components/exchange/index.js","components/app/index.js","index.js"],"names":["Wrapper","styled","div","theme","colors","blue","header","Header","Text","fontSize","color","aria-label","role","getRates","_","base","a","axios","get","data","useRates","useQuery","refetchInterval","PocketsContext","createContext","usePocketsContext","useContext","PocketsProvider","children","useState","USD","EUR","GBP","pocket","setPocket","Provider","value","getBalance","currency","makeExchange","activeCurrency","tradeCurrency","inputValue","tradeValue","prevPocket","Number","ExchangeContext","useExchangeContext","ExchangeProvider","availableCurrencies","setActiveCurrency","setTradeCurrency","exchangeError","setExchangeError","setInputValue","setTradeValue","activeRateData","isLoadingActiveRate","isLoading","tradeRateData","isLoadingTradeRate","getInputValue","useCallback","isTrade","getActiveRate","rates","getTradeRate","useEffect","toFixed","getCurrency","handleSwitchCurrency","tempActive","getCurrencyOptions","filter","activeRate","tradeRate","isLoadingRate","handleChangeCurrency","validateExchange","maxValue","handleChangeValues","newValue","indexOf","substr","SelectCurrency","currencyType","trade","Select","padding","width","borderColor","backgroundColor","onChange","e","target","placeholder","map","key","InputWrapper","isInvalid","red","InputValue","error","setError","Input","textAlign","variant","type","pattern","isNaN","parseFloat","validateField","size","BalanceWrapper","RateCard","as","RateValue","marginRight","SwitchCurrency","Button","variantColor","loadingText","icon","onClick","Icon","name","SubmitExchange","marginBottom","disabled","bg","Exchange","App","ReactDOM","render","StrictMode","ThemeProvider","CSSReset","document","getElementById"],"mappings":"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","file":"static/js/main.c6fdf6aa.chunk.js","sourcesContent":["import styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n  display:flex;\n  flex-direction:column;\n  min-height: 100vh;\n  background-color: ${({ theme }) => theme.colors.blue[900]};\n  padding: 20px 40px;\n`;\n","import styled from '@emotion/styled';\n\nexport const Wrapper = styled.header`\n  padding: 20px 0;\n  margin-bottom: 40px;\n`;\n","import React from 'react';\nimport { Text } from '@chakra-ui/core';\nimport { Wrapper } from './styles';\n\nconst Header = () => (\n  <Wrapper>\n    <Text fontSize=\"5xl\" color=\"white\">\n      Exchange\n      {' '}\n      <span aria-label=\"money\" role=\"img\">ğŸ’°</span>\n    </Text>\n  </Wrapper>\n);\n\nexport default Header;\n","import styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  max-width: 500px;\n  width: 100%;\n  margin: 0 auto;\n`;\n","import axios from 'axios';\nimport { useQuery } from 'react-query';\n\nexport const getRates = async (_, base) => {\n  const { data } = await axios.get(`https://api.exchangeratesapi.io/latest?base=${base}`);\n\n  return data;\n};\n\nexport const useRates = ({ base }) => useQuery(\n  ['rates', base],\n  getRates,\n  {\n    refetchInterval: 10000,\n  },\n);\n","import React, {\n  createContext, useContext, useState,\n} from 'react';\nimport PropTypes from 'prop-types';\n\nconst PocketsContext = createContext();\n\nexport const usePocketsContext = () => useContext(PocketsContext);\n\nconst PocketsProvider = ({ children }) => {\n  const [pocket, setPocket] = useState({\n    USD: 100,\n    EUR: 90,\n    GBP: 70,\n  });\n\n  const getBalance = (currency) => pocket[currency];\n  const makeExchange = ({\n    activeCurrency, tradeCurrency, inputValue, tradeValue,\n  }) => {\n    setPocket((prevPocket) => ({\n      ...prevPocket,\n      [activeCurrency]: Number(prevPocket[activeCurrency]) - Number(inputValue),\n      [tradeCurrency]: Number(prevPocket[tradeCurrency]) + Number(tradeValue),\n    }));\n  };\n\n  return (\n    <PocketsContext.Provider value={{\n      pocket,\n      getBalance,\n      makeExchange,\n    }}\n    >\n      {children}\n    </PocketsContext.Provider>\n  );\n};\n\nPocketsProvider.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default PocketsProvider;\n","import React, {\n  createContext, useContext, useState, useEffect, useCallback,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport { useRates } from '../../queries/rates';\nimport { usePocketsContext } from '../pockets';\n\nconst ExchangeContext = createContext();\n\nexport const useExchangeContext = () => useContext(ExchangeContext);\n\nconst ExchangeProvider = ({ children }) => {\n  const [availableCurrencies] = useState(['USD', 'EUR', 'GBP']);\n  const [activeCurrency, setActiveCurrency] = useState('USD');\n  const [tradeCurrency, setTradeCurrency] = useState('EUR');\n  const [exchangeError, setExchangeError] = useState(null);\n  const [inputValue, setInputValue] = useState(0);\n  const [tradeValue, setTradeValue] = useState(0);\n  const {\n    getBalance,\n  } = usePocketsContext();\n\n  const { data: activeRateData, isLoading: isLoadingActiveRate } = useRates({ base: activeCurrency });\n  const { data: tradeRateData, isLoading: isLoadingTradeRate } = useRates({ base: tradeCurrency });\n\n  // Returns correct value for input field\n  const getInputValue = useCallback((isTrade) => (isTrade ? tradeValue : inputValue), [tradeValue, inputValue]);\n\n  // Returns current active rate or 1 if the active and trade rates are the same\n  const getActiveRate = useCallback(\n    () => !isLoadingActiveRate && (activeRateData.rates[tradeCurrency] || 1),\n    [isLoadingActiveRate, activeRateData, tradeCurrency],\n  );\n\n  // Returns current trade rate for converting back\n  const getTradeRate = () => !isLoadingTradeRate && (tradeRateData.rates[activeCurrency] || 1);\n\n  // Returns currency\n  const getCurrency = (isTrade) => (isTrade ? tradeCurrency : activeCurrency);\n\n  const getCurrencyOptions = (isTrade) => availableCurrencies.filter((currency) => (\n    !isTrade ? currency !== tradeCurrency : currency !== activeCurrency));\n\n  const handleSwitchCurrency = () => {\n    const tempActive = activeCurrency;\n    const tempTrade = tradeCurrency;\n    setActiveCurrency(tempTrade);\n    setTradeCurrency(tempActive);\n  };\n\n  const handleChangeCurrency = (isTrade, value) => {\n    if (isTrade) {\n      return setTradeCurrency(value);\n    }\n\n    return setActiveCurrency(value);\n  };\n\n  const validateExchange = (value) => {\n    const maxValue = getBalance(activeCurrency);\n\n    if (Number(value) > Number(maxValue)) {\n      return setExchangeError('Not enough balance');\n    }\n\n    return setExchangeError(null);\n  };\n\n  const handleChangeValues = (value, isTrade) => {\n    const newValue = (value.indexOf('.') >= 0) ? (value.substr(0, value.indexOf('.')) + value.substr(value.indexOf('.'), 3)) : value;\n\n    if (isTrade) {\n      setTradeValue(newValue);\n      setInputValue((newValue * getTradeRate).toFixed(2));\n    } else {\n      setTradeValue((newValue * getActiveRate()).toFixed(2));\n      setInputValue(newValue);\n    }\n  };\n\n  useEffect(() => {\n    setTradeValue((getInputValue() * getActiveRate()).toFixed(2));\n  }, [getActiveRate, getInputValue]);\n\n  return (\n    <ExchangeContext.Provider value={{\n      availableCurrencies,\n      activeCurrency,\n      tradeCurrency,\n      getCurrency,\n      handleSwitchCurrency,\n      getCurrencyOptions,\n      activeRate: getActiveRate(),\n      tradeRate: getTradeRate(),\n      isLoadingRate: isLoadingActiveRate || isLoadingTradeRate,\n      handleChangeCurrency,\n      exchangeError,\n      setExchangeError,\n      validateExchange,\n      handleChangeValues,\n      getInputValue,\n    }}\n    >\n      { children}\n    </ExchangeContext.Provider>\n  );\n};\n\nExchangeProvider.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default ExchangeProvider;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Select } from '@chakra-ui/core';\nimport { useExchangeContext } from '../../../contexts/exchange';\n\nconst SelectCurrency = ({ currencyType, trade }) => {\n  const { availableCurrencies, handleChangeCurrency } = useExchangeContext();\n\n  const handleOnChange = (e) => {\n    handleChangeCurrency(trade, e.target.value);\n  };\n\n  return (\n    <Select padding=\"0 0 0 10px\" width=\"100px\" borderColor=\"transparent\" backgroundColor=\"transparent\" color=\"white\" value={currencyType} onChange={handleOnChange} placeholder=\"Select option\">\n      {\n        availableCurrencies.map((currency) => (\n          <option\n            key={currency}\n            value={currency}\n          >\n            {currency}\n\n          </option>\n        ))\n      }\n    </Select>\n  );\n};\n\nSelectCurrency.propTypes = {\n  currencyType: PropTypes.string,\n  trade: PropTypes.bool,\n};\n\nexport default SelectCurrency;\n","import styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  max-width: 90px;\n  width: 100%;\n`;\n\nexport const InputWrapper = styled.div`\n  display:flex;\n  flex-direction: row;\n  align-items: center;\n\n  ${({ isInvalid, theme }) => isInvalid && `border-bottom: 2px solid ${theme.colors.red[700]}`}\n`;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Input, Text } from '@chakra-ui/core';\nimport { useExchangeContext } from '../../../contexts/exchange';\nimport { Wrapper, InputWrapper } from './styles';\nimport { validateField } from './utils';\n\nconst InputValue = ({ trade }) => {\n  const { validateExchange, handleChangeValues, getInputValue } = useExchangeContext();\n  const [error, setError] = useState(null);\n  const getPrefix = (isTrade) => (isTrade ? '+' : '-');\n\n  useEffect(() => {\n    // we only want to validate the active pocket input for remaining balance\n    if (!trade) {\n      validateExchange(getInputValue());\n    }\n  }, [getInputValue, validateExchange, trade]);\n\n  const handleOnChange = (e) => {\n    validateField(e.target.value, setError);\n    handleChangeValues(e.target.value, trade);\n  };\n\n  return (\n    <Wrapper>\n      <InputWrapper isInvalid={!!error}>\n        <Text color=\"white\">{ getPrefix(trade) }</Text>\n        <Input textAlign=\"right\" color=\"white\" variant=\"unstyled\" type=\"number\" pattern=\"^\\d*(\\.\\d{0,2})?$\" onChange={handleOnChange} value={getInputValue(trade)} placeholder=\"0\" size=\"md\" />\n      </InputWrapper>\n    </Wrapper>\n  );\n};\n\nInputValue.propTypes = {\n  trade: PropTypes.bool,\n};\n\nexport default InputValue;\n","export const validateField = (value, setError) => {\n  if (!Number.isNaN(value) && !Number.isNaN(parseFloat(value))) {\n    return setError(null);\n  }\n  return setError(true);\n};\n","import styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  border-radius: 5px;\n  margin-bottom: 20px;\n  align-items: flex-end;\n  overflow: hidden;\n`;\n\nexport const InputWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n  padding: 15px;\n  background-color: ${({ theme }) => theme.colors.blue[800]}\n`;\n\nexport const BalanceWrapper = styled.div`\n  background-color: ${({ theme }) => theme.colors.blue[700]};\n  width: 100%;\n  padding: 10px;\n  text-align: right;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Text } from '@chakra-ui/core';\nimport SelectCurrency from './select-currency';\nimport InputValue from './input-value';\nimport { useExchangeContext } from '../../contexts/exchange';\nimport { usePocketsContext } from '../../contexts/pockets';\nimport { Wrapper, InputWrapper, BalanceWrapper } from './styles';\n\nconst RateCard = ({ trade }) => {\n  const { getCurrency } = useExchangeContext();\n  const { getBalance } = usePocketsContext();\n  const currencyType = getCurrency(trade);\n\n  return (\n    <Wrapper>\n      <InputWrapper>\n        <SelectCurrency trade={trade} currencyType={currencyType} />\n        <InputValue trade={trade} />\n      </InputWrapper>\n      <BalanceWrapper>\n        <Text as=\"i\" fontSize=\"sm\" color=\"blue.300\">\n          balance:\n          {' '}\n          {getBalance(currencyType) + currencyType}\n        </Text>\n      </BalanceWrapper>\n    </Wrapper>\n  );\n};\n\nRateCard.propTypes = {\n  trade: PropTypes.bool,\n};\n\nexport default RateCard;\n","import React from 'react';\nimport { Text } from '@chakra-ui/core';\nimport { useExchangeContext } from '../../contexts/exchange';\n\nconst RateValue = () => {\n  const { activeRate, activeCurrency, tradeCurrency } = useExchangeContext();\n\n  if (!activeRate) {\n    return null;\n  }\n\n  return (<Text marginRight=\"10px\">{`1${activeCurrency} = ${activeRate.toFixed(4)}${tradeCurrency}`}</Text>);\n};\n\nexport default RateValue;\n","import styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n  margin-bottom: 20px;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n`;\n","import React from 'react';\nimport { Button, Icon } from '@chakra-ui/core';\nimport { useExchangeContext } from '../../contexts/exchange';\nimport RateValue from '../rate-value';\nimport { Wrapper } from './styles';\n\nconst SwitchCurrency = () => {\n  const { handleSwitchCurrency, isLoadingRate } = useExchangeContext();\n\n  return (\n    <Wrapper>\n      <Button variantColor=\"blue\" variant=\"outline\" loadingText=\"Fetching rate\" isLoading={isLoadingRate} icon=\"repeat\" onClick={handleSwitchCurrency}>\n        <RateValue />\n        <Icon color=\"teal\" name=\"repeat\" />\n      </Button>\n    </Wrapper>\n  );\n};\n\nexport default SwitchCurrency;\n","import styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n","import React from 'react';\nimport { Button, Text } from '@chakra-ui/core';\nimport { usePocketsContext } from '../../../contexts/pockets';\nimport { useExchangeContext } from '../../../contexts/exchange';\nimport { Wrapper } from './styles';\n\nconst SubmitExchange = () => {\n  const { makeExchange } = usePocketsContext();\n  const {\n    activeCurrency, tradeCurrency, exchangeError, getInputValue,\n  } = useExchangeContext();\n\n  const handleOnClick = () => {\n    makeExchange({\n      activeCurrency, tradeCurrency, inputValue: getInputValue(), tradeValue: getInputValue(true),\n    });\n  };\n\n  return (\n    <Wrapper>\n      <Button variantColor=\"pink\" marginBottom=\"20px\" disabled={activeCurrency === tradeCurrency || !!exchangeError} onClick={handleOnClick}>Exchange</Button>\n      { exchangeError && <Text bg=\"red.500\" padding=\"10px\" color=\"white\">{exchangeError}</Text> }\n    </Wrapper>\n  );\n};\n\nexport default SubmitExchange;\n","import React from 'react';\nimport { Wrapper } from './styles';\nimport RateCard from '../rate-card';\nimport ExchangeContext from '../../contexts/exchange';\nimport SwitchCurrency from '../switch-currency';\nimport SubmitExchange from './submit-exchange';\n\nconst Exchange = () => (\n  <Wrapper>\n    <ExchangeContext>\n      <RateCard />\n      <SwitchCurrency />\n      <RateCard trade />\n      <SubmitExchange />\n    </ExchangeContext>\n  </Wrapper>\n);\n\nexport default Exchange;\n","import React from 'react';\nimport { Wrapper } from './styles';\nimport Header from '../header';\nimport Exchange from '../exchange';\n\nfunction App() {\n  return (\n    <Wrapper>\n      <Header />\n      <Exchange />\n    </Wrapper>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport { theme, ThemeProvider, CSSReset } from '@chakra-ui/core';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\nimport PocketContext from './contexts/pockets';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <CSSReset />\n      <PocketContext>\n        <App />\n      </PocketContext>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}